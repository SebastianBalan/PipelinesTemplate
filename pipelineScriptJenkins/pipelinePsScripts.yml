pipeline {
     agent any
     environment {
        RunTests = "True"
        TestsRunSuccessfully = "True"
    }
     stages {
         stage('Initialize the variables') {
             // Each stage is made up of steps
             steps{
                 script{
                     PROCESS_OUTPUT_PATH = "${WORKSPACE}\\Process\\Output\\${BUILD_NUMBER}"
                     TEST_OUTPUT_PATH = "${WORKSPACE}\\test-reports"
                     ASSETS_FILE_PATH = "${WORKSPACE}\\assets.csv"
                 }
             }               
         }
         stage('Standalone Analyzer') {
             steps {
                 echo 'Standalone Analyzer'
                 powershell '''param(
                        $ProjectFilePath=".\\",
                        $OutputFilePath="$(Get-Date -Format \'yyyy-MM-dd-HH-mm-ss\')-Workflow-Analysis.json",
                        $StandaloneAnalyzerPath = "C:\\sebi\\Projects\\KP\\Release\\net6.0-windows7.0\\UiPath.StandaloneCLI.dll",
                        $PolicyfilePath = ".\\policy.json"
                    )
                    
                
                    Write-Output "$(Get-Date -Format 'HH:mm:ss') - STARTED - Static Code Analyzer"
                    
                    $Command = "dotnet $StandaloneAnalyzerPath analyze -p `'$ProjectFilePath`' --policy_file $PolicyfilePath"
                    Invoke-Expression $Command | Out-File -FilePath $OutputFilePath
                    $rp = Get-Content $OutputFilePath | foreach {$_.replace("#json","")}
                    
                    Set-Content -Path $OutputFilePath -Value $rp
                    #Write-Output $rp
                    $JO = Get-Content $OutputFilePath | ConvertFrom-Json
                    
                    #Write-Output $JO[1]
                    $totalErros=0
                    
                    
                    $ErrorCode = "Error Code"
                    $ErrorSeverity = "Error Severity"
                    $Description = "Description"
                    $Recommendation = "Recommendation"
                    $FilePath = "File Path"
                    
                    
                    foreach ($row in $JO) {
                        foreach ($ky in $row.PSObject.Properties)
                        {
                        	if ($ky.Name.EndsWith("ErrorCode"))
                        	{
                        		$ErrorCode = $ky.Value
                        	}
                        	if ($ky.Name.EndsWith("Description"))
                        	{
                        		$Description = $ky.Value
                        	}
                        	if ($ky.Name.EndsWith("FilePath"))
                        	{
                        		$FilePath = $ky.Value
                        	}
                        	if ($ky.Name.EndsWith("ErrorSeverity"))
                        	{
                        		$ErrorSeverity = $ky.Value
                        		if ($ErrorSeverity.Equals("Error"))
                        		{
                        			$totalErros++
                        		}
                        	}
                        	if ($ky.Name.EndsWith("Recommendation"))
                        	{
                        		$Recommendation = $ky.Value
                        		if ($ErrorSeverity.Equals("Error"))
                        		{ 
                        			Write-Output "Error code: $ErrorCode, File: $FilePath, $Description, $Recommendation"
                        		}
                        	}
                        
                        }
                    }
                    
                    
                    
                    
                    #Write-Output to pipeline
                    
                    Write-Output "$(Get-Date -Format 'HH:mm:ss') - COMPLETED - Static Code Analyzer"
                    
                    #Get-Content $OutputFilePath | ConvertFrom-Json | ConvertTo-Csv | Out-File $CSVFilePath
                    
                    
                    Write-Output "Total Number of Violations = $totalErros"
                    if ($totalErros > 0)
                    {
                    	Exit 1
                    }'''
             }
         }
         stage('Build code for Process') {
             steps {
                 echo 'UiPathPack'
                 powershell returnStatus: true, script: '.\\UiPathPack.ps1 ".\\project.json" -destination_folder ".\\ProcessOutputPacked" -autoversion'
             }
         }
         stage('Deploy code') {
             when {
                equals expected : 'True', actual: TestsRunSuccessfully
            }
             steps {
                 echo 'UiPathDeploy'
                 powershell returnStatus: true, script: '.\\UiPathDeploy.ps1 ".\\ProcessOutputPacked" "https://cloud.uipath.com/aitraining" UiPathDefault -UserKey 2bpZubtS0CTois48kCKdfr7CTRq_5omtbpaQG43v4rcmU -account_name aitraining -folder_organization_unit sebi'
             }
         }
         stage('Run Tests') {
             when {
                equals expected : 'True', actual: RunTests
            }
             steps {
                 echo 'UiPathRunTests'
                 powershell returnStatus: true, script: '.\\UiPathRunTests.ps1 "https://cloud.uipath.com/aitraining" UiPathDefault -UserKey 2bpZubtS0CTois48kCKdfr7CTRq_5omtbpaQG43v4rcmU -account_name aitraining -testset "JenkinsTestPipeline" -folder_organization_unit sebi -result_path ".\\test-reports"'
                 script {
                     if (currentBuild.result == 'UNSTABLE'){
                         currentBuild.result = 'FAILURE'
                         TestsRunSuccessfully = 'False'
                     }
                 }
             }
         }
     }
 }
